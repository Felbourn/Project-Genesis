
@PART[*]:HAS[#mass[*]]:AFTER[zPhase5Mass]
{
	%VARS
	{
		old_mass = #$/mass$
	}
}
@PART[*]:HAS[#mass[*]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = clear mass
	}
	@mass = 0 // init to 0, then add masses by traits
}

@PART[*]:HAS[@MASS[OldValue]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = use author's mass
	}
	@mass = #$/VARS/old_mass$
}

@PART[*]:HAS[@MODULE[ModuleFuelTanks]:HAS[~type[HTPB]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for ModuleFuelTanks
	}
	%VARS
	{
		%modTank = #$/MODULE[ModuleFuelTanks]/volume$
		@modTank *= #$@MM_VARS/FuelMassPerLiter$
		@modTank /= #$@MM_VARS/KgPerTon$
	}
}
@PART[*]:HAS[@VARS:HAS[#modTank[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from ModuleFuelTanks
	}
	@mass += #$/VARS/modTank$
}

@PART[*]:HAS[@MODULE[ModuleFuelTanks]:HAS[#type[HTPB]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for solid fuel volume
	}
	%VARS
	{
		%modTankSolid = #$/MODULE[ModuleFuelTanks]/volume$
		@modTankSolid *= #$@MM_VARS/SolidMassPerLiter$
		@modTankSolid /= #$@MM_VARS/KgPerTon$
		@modTankSolid += #$modTankSolid$
	}
}
@PART[*]:HAS[@VARS:HAS[#modTankSolid[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from solid fuel volume
	}
	@mass += #$/VARS/modTankSolid$
}

@PART[*]:HAS[@CREW_VOLUME[*]]:AFTER[zPhase5Mass]
{
	%ACTIONS // crew need interal "stuff" and places to put "stuff" that all has mass
	{
		action = define mass for crew capacity
	}
	%VARS
	{
		crewMassCount = #$/CrewCapacity$
		crewMass = #$/CrewCapacity$
		@crewMass *= #$@MM_VARS/MassPerCrew$
	}
}
@PART[*]:HAS[@VARS:HAS[#crewMass[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS // crew need interal "stuff" and places to put "stuff" that all has mass
	{
		action = add mass for crew capacity
	}
	@mass += #$/VARS/crewMass$
}

@PART[*]:HAS[@MASS[Engine]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for maxThrust
	}
	%VARS
	{
		%engineMass = #$/MODULE[ModuleEnginesFX]/maxThrust$
		@engineMass /= #$/VARS/TWR_type$
		@engineMass /= #$@MM_VARS/Gravity$
	}
}
@PART[*]:HAS[@VARS:HAS[#engineMass[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from maxThrust
	}
	@mass += #$/VARS/engineMass$
}

@PART[*]:HAS[@MASS[RCS]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for RCS
	}
	%VARS
	{
		%RCSmass = #$/MODULE[ModuleRCSFX]/thrusterPower$
		@RCSmass /= #$@MM_VARS/RCS_TWR$
		@RCSmass /= #$@MM_VARS/Gravity$
		@RCSmass *= #$/VARS/RCS_directions$
	}
}
@PART[*]:HAS[@VARS:HAS[#RCSmass[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from RCS
	}
	@mass += #$/VARS/RCSmass$
}

@PART[*]:HAS[@MASS[BoxVolume]]:AFTER[zPhase5Mass]
{
	// V = w * h * d

	%ACTIONS
	{
		action = add mass from box volume
	}
	change = #$/MASS[BoxVolume]/wid$
	@change *= #$/MASS[BoxVolume]/hgt$
	@change *= #$/MASS[BoxVolume]/dep$
	@change *= #$/MASS[BoxVolume]/density$
	@mass += #$change$

	!change = DELETE
}

@PART[*]:HAS[@MASS[BoxArea]]:AFTER[zPhase5Mass]
{
	// A = 2wh + 2wd + 2hd

	%ACTIONS
	{
		action = add mass from box area
	}
	side1 = #$/MASS[BoxArea]/wid$
	@side1 *= #$/MASS[BoxArea]/hgt$
	@side1 *= 2

	side2 = #$/MASS[BoxArea]/wid$
	@side2 *= #$/MASS[BoxArea]/dep$
	@side2 *= 2

	side3 = #$/MASS[BoxArea]/dep$
	@side3 *= #$/MASS[BoxArea]/hgt$
	@side3 *= 2

	change = #$/side1$
	@change += #$/side2$
	@change += #$/side3$

	@change *= #$/MASS[BoxArea]/thick$
	@change *= #$/MASS[BoxArea]/density$
	@mass += #$change$

	!change = DELETE
	!side1 = DELETE
	!side2 = DELETE
	!side3 = DELETE
}

@PART[*]:HAS[@MASS[SphereArea]]:AFTER[zPhase5Mass]
{
	// A = 4 * π * r^2
	%ACTIONS
	{
		action = define mass from sphere area
	}
	%VARS
	{
		sphereAreaParams = #$/MASS[SphereArea]/dia$ $/MASS[SphereArea]/dep$ $/MASS[SphereArea]/density$
		sphereAreaMass = #$/MASS[SphereArea]/dia$
		@sphereAreaMass *= #$@MM_VARS/DiamToRadius$
		@sphereAreaMass != #$@MM_VARS/Squared$
		@sphereAreaMass *= #$@MM_VARS/PI$
		@sphereAreaMass *= 4
		@sphereAreaMass *= #$/MASS[SphereArea]/dep$
		@sphereAreaMass *= #$/MASS[SphereArea]/density$
	}
}
@PART[*]:HAS[@VARS:HAS[#sphereAreaMass[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass for sphere area
	}
	@mass += #$/VARS/sphereAreaMass$
}

@PART[*]:HAS[@MASS[SphereVolume]]:AFTER[zPhase5Mass]
{
	// V = 4/3 * π * r^3
	%ACTIONS
	{
		action = add mass from sphere volume
	}
	change = #$/MASS[SphereVolume]/dia$
	@change *= #$@MM_VARS/DiamToRadius$
	@change != #$@MM_VARS/Cubed$
	@change *= #$@MM_VARS/PI$
	@change *= #$@MM_VARS/SphereRatio$
	@change *= #$/MASS[SphereVolume]/density$
	@mass += #$change$
	!change = DELETE
}

@PART[*]:HAS[@RESOURCE[ElectricCharge]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for battery charge
	}
	%VARS
	{
		%batteryMass = #$/RESOURCE[ElectricCharge]/amount$
		@batteryMass *= #$@MM_VARS/TonsPerWattHour$
	}
}
@PART[*]:HAS[@RESOURCE[ElectricCharge]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from battery charge
	}
	@mass += #$/VARS/batteryMass$
}

@PART[*]:HAS[@VARS:HAS[#comm_mass[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = #add mass from comm antenna ($/VARS/comm_mass$)
	}
	@mass += #$/VARS/comm_mass$
}

@PART[*]:HAS[@VARS:HAS[#commandWatts[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = #add mass from CPU & electronics ($@MM_VARS/CPUMass$)
	}
	@mass += #$@MM_VARS/CPUMass$
}

@PART[*]:HAS[@MODULE[ModuleReactionWheel]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for CMG torque
	}
	%VARS
	{
		%gyro = #$/MODULE[ModuleReactionWheel]/PitchTorque$
		@gyro *= #$@MM_VARS/TonsPerTorque$
	}
}
@PART[*]:HAS[@MODULE[ModuleReactionWheel]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from CMG torque
	}
	@mass += #$/VARS/gyro$
}

@PART[*]:HAS[@MODULE[ModuleDeployableSolarPanel]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for solar array rect
	}
	%VARS
	{
		%solarMass = #$/MODULE[ModuleDeployableSolarPanel]/chargeRate$
		@solarMass *= #$@MM_VARS/SolarMass$
	}
}
@PART[*]:HAS[@MODULE[ModuleDeployableSolarPanel]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from solar array rect
	}
	@mass += #$/VARS/solarMass$
}

@PART[*]:HAS[@MODULE[ModuleCurvedSolarPanel]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for solar array round
	}
	%VARS
	{
		%solarMass = #$/MODULE[ModuleCurvedSolarPanel]/TotalEnergyRate$
		@solarMass *= #$@MM_VARS/SolarMass$
	}
}
@PART[*]:HAS[@MODULE[ModuleCurvedSolarPanel]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from solar array round
	}
	@mass += #$/VARS/solarMass$
}

@PART[*]:HAS[@MASS[CanArea]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = set CanArea mass defaults
	}
	@MASS[CanArea]:HAS[~arcs[]]
	{
		arcs = 1
	}
	@MASS[CanArea]:HAS[~ends[]]
	{
		ends = 0
	}
}
@PART[*]:HAS[@MASS[CanArea]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for cylinder surface area
	}
	@MASS[CanArea]
	{
		// top & bottom A = π * r^2
		%canMass = #$/MASS[CanArea]/dia$
		@canMass *= #$@MM_VARS/DiamToRadius$
		@canMass != #$@MM_VARS/Squared$
		@canMass *= #$@MM_VARS/PI$
		@canMass *= #$/MASS[CanArea]/dep$
		@canMass *= #$/MASS[CanArea]/density$
		@canMass *= #$/MASS[CanArea]/ends$

		// lateral A = π * d * h
		%lateral = #$/MASS[CanArea]/dia$
		@lateral *= #$@MM_VARS/PI$
		@lateral *= #$/MASS[CanArea]/hgt$
		@lateral *= #$/MASS[CanArea]/dep$
		@lateral *= #$/MASS[CanArea]/density$

		%canMassTotal = #$canMass$
		@canMassTotal += #$lateral$
		@canMassTotal /= #$/MASS[CanArea]/arcs$
	}
}
@PART[*]:HAS[@MASS[CanArea]:HAS[#canMassTotal[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = set mass from cylinder surface area
	}
	@mass += #$/MASS[CanArea]/canMassTotal$
}

@PART[*]:HAS[@MASS[CanVolume]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from cylinder volume
	}
	// V = π * r^2 * h
	change = #$/MASS[CanVolume]/dia$
	@change *= #$@MM_VARS/DiamToRadius$
	@change != #$@MM_VARS/Squared$
	@change *= #$@MM_VARS/PI$
	@change *= #$/MASS[CanVolume]/hgt$
	@change *= #$/MASS[CanVolume]/density$
	@mass += #$change$
	!change = DELETE
}

@PART[*]:HAS[@MASS[TruncConeVolume]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = define mass for truncated cone volume
	}

	// V = π * h * (r^2 + Rr + R^2)/3
	@MASS[TruncConeVolume]
	{
		%topRadius = #$/MASS[TruncConeVolume]/diaTop$
		@topRadius *= #$@MM_VARS/DiamToRadius$
		%topRadius2 = #$topRadius$
		@topRadius2 != #$@MM_VARS/Squared$

		%botRadius = #$/MASS[TruncConeVolume]/diaBot$
		@botRadius *= #$@MM_VARS/DiamToRadius$
		%botRadius2 = #$botRadius$
		@botRadius2 != #$@MM_VARS/Squared$

		%tConeMass = #$topRadius$
		@tConeMass *= #$botRadius$
		@tConeMass += #$topRadius2$
		@tConeMass += #$botRadius2$
		@tConeMass /= 3
		@tConeMass *= #$@MM_VARS/PI$
		@tConeMass *= #$/MASS[TruncConeVolume]/hgt$
		@tConeMass *= #$/MASS[TruncConeVolume]/density$
	}
}
@PART[*]:HAS[@MASS[TruncConeVolume]:HAS[#tConeMass[*]]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from truncated cone volume
	}
	@mass += #$/MASS[TruncConeVolume]/tConeMass$
}

//-------------------------------------------------------------------------------------------------
// SQRT(x) calculator
//-------------------------------------------------------------------------------------------------

//-- things that need a SQRT ----------------------------------------------------------------------

@PART[*]:HAS[@MASS[ConeArea]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from cone area
	}
	// lateral A = π * r * sqrt(h^2 + r^2)

	radius = #$/MASS[ConeArea]/dia$
	@radius *= #$@MM_VARS/DiamToRadius$
	radius2 = #$radius$
	@radius2 != #$@MM_VARS/Squared$

	sqrt_of = #$/MASS[ConeArea]/hgt$
	@sqrt_of != #$@MM_VARS/Squared$
	@sqrt_of += #$radius2$
}

@PART[*]:HAS[@MASS[TruncConeArea]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from tuncated cone surface area
	}
	// lateral A = π * (r1 + r2) * sqrt( (r1 - r2)^2 + h^2 )
	hgt_sq = #$/MASS[TruncConeArea]/hgt$
	@hgt_sq != #$@MM_VARS/Squared$

	r1 = #$/MASS[TruncConeArea]/diaTop$
	@r1 *= #$@MM_VARS/DiamToRadius$

	r2 = #$/MASS[TruncConeArea]/diaBot$
	@r2 *= #$@MM_VARS/DiamToRadius$

	sqrt_of = #$r1$
	@sqrt_of -= #$r2$
	@sqrt_of != #$@MM_VARS/Squared$

	@sqrt_of += #$hgt_sq$

	!hgt_sq = DELETE
}

@PART[*]:HAS[@MASS[FairingCone]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = add mass from fairing cone volume
	}
	// lateral A = π * r * sqrt(h^2 + r^2)
	radius = #$/MASS[FairingCone]/dia$
	@radius *= #$@MM_VARS/DiamToRadius$
	
	radius2 = #$radius$
	@radius2 != #$@MM_VARS/Squared$

	sqrt_of = #$/MASS[FairingCone]/hgt$
	@sqrt_of != #$@MM_VARS/Squared$
	@sqrt_of += #$radius2$
}

//-- calculator -----------------------------------------------------------------------------------

@PART[*]:HAS[#sqrt_of[*]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = do SQRT function
	}

	// iterate a few times to refine the sqrt guess
	// f(x) = x^2 - top
	// f'(x) = 2x
	// x' = x - f(x) / f'(x)

	x_value = #$sqrt_of$
	@x_value /= 13

	// iteration 1
	sqrt_fx = #$x_value$
	@sqrt_fx != #$@MM_VARS/Squared$
	@sqrt_fx -= #$sqrt_of$
	@sqrt_fx /= #$x_value$
	@sqrt_fx *= -0.5
	@x_value += #$sqrt_fx$

	// iteration 2
	sqrt_fx = #$x_value$
	@sqrt_fx != #$@MM_VARS/Squared$
	@sqrt_fx -= #$sqrt_of$
	@sqrt_fx /= #$x_value$
	@sqrt_fx *= -0.5
	@x_value += #$sqrt_fx$

	// iteration 3
	sqrt_fx = #$x_value$
	@sqrt_fx != #$@MM_VARS/Squared$
	@sqrt_fx -= #$sqrt_of$
	@sqrt_fx /= #$x_value$
	@sqrt_fx *= -0.5
	@x_value += #$sqrt_fx$

	// iteration 4
	sqrt_fx = #$x_value$
	@sqrt_fx != #$@MM_VARS/Squared$
	@sqrt_fx -= #$sqrt_of$
	@sqrt_fx /= #$x_value$
	@sqrt_fx *= -0.5
	@x_value += #$sqrt_fx$

	// iteration 5
	sqrt_fx = #$x_value$
	@sqrt_fx != #$@MM_VARS/Squared$
	@sqrt_fx -= #$sqrt_of$
	@sqrt_fx /= #$x_value$
	@sqrt_fx *= -0.5
	@x_value += #$sqrt_fx$

	// iteration 6
	sqrt_fx = #$x_value$
	@sqrt_fx != #$@MM_VARS/Squared$
	@sqrt_fx -= #$sqrt_of$
	@sqrt_fx /= #$x_value$
	@sqrt_fx *= -0.5
	@x_value += #$sqrt_fx$

	// final
	sqrt_is = #$x_value$

	!sqrt_of = DELETE
	!x_value = DELETE
	!sqrt_fx = DELETE
}

//-- use SQRT results -----------------------------------------------------------------------------

@PART[*]:HAS[@MASS[ConeArea]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = finish cone area mass
	}
	// lateral A = π * r * sqrt(h^2 + r^2)

	change = #$sqrt_is$
	@change *= #$@MM_VARS/PI$
	@change *= #$radius$
	@change *= #$/MASS[ConeArea]/dep$
	@change *= #$/MASS[ConeArea]/density$
	@change /= #$/MASS[ConeArea]/arcs$

	@mass += #$change$

	!change = DELETE
	!radius = DELETE
	!radius2 = DELETE
	!massTypeConeArea = DELETE
	!sqrt_is = DELETE
}

@PART[*]:HAS[@MASS[TruncConeArea]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = finish trunc cone area mass
	}
	// lateral A = π * (r1 + r2) * sqrt( (r1 - r2)^2 + h^2 )
	// top & bottom A = π * r1^2 + π * r2^2

	change = #$r1$
	@change += #$r2$
	@change *= #$sqrt_is$
	@change *= #$@MM_VARS/PI$
	@change *= #$/MASS[TruncConeArea]/dep$
	@change *= #$/MASS[TruncConeArea]/density$
	@mass += #$change$

	!change = DELETE
	!r1 = DELETE
	!r2 = DELETE
	!sqrt_is = DELETE
}

@PART[*]:HAS[@MASS[FairingCone]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = finish fairing mass
	}
	// half cone = π * r * sqrt(h^2 + r^2)
	// half can = 2 * π * r * h
	// so A = π * r * (sqrt / 2 + h)

	change = #$sqrt_is$
	@change /= 2
	@change += #$/MASS[FairingCone]/hgt$
	@change *= #$@MM_VARS/PI$
	@change *= #$radius$
	@change *= #$/MASS[FairingCone]/dep$
	@change /= #$/MASS[FairingCone]/arcs$
	@change *= #$@MM_VARS/FairingMass$
	@mass += #$change$

	!change = DELETE
	!radius = DELETE
	!radius2 = DELETE
	!sqrt_is = DELETE
}

//-------------------------------------------------------------------------------------------------
// still needs a MASS section
@PART[*]:HAS[#mass[0]]:AFTER[zPhase5Mass]
{
	%ACTIONS
	{
		action = no mass defined, setting to default 999
	}
	@mass = 999
}
